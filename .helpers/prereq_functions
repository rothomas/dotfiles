#!/bin/sh

installed() {
  command -v "$1" >/dev/null
}

download() {
  local url=$1
  if installed curl; then
    curl -o- "$url"
  elif installed wget; then
    wget -qO- "$url"
  else
    >&2 echo "Either wget or curl must be installed. Cannot continue."
    exit 1
  fi
}

download_run_script() {
  local url=$1 script=`download "$url"`
  sh -c "$script"
}

use_homebrew() {
  if [ "$uname" = "linux" ]; then
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
  elif [ "$uname" = "darwin" ]; then
    eval "$(/usr/local/bin/brew shellenv)"
  else
    >&2 echo "Unsupported OS type.  Cannot continue."
    exit 1
  fi
}

get_sudo() {
  if [ \( `whoami` != "root" \) -a \( -z "$SUDOER" \) ]; then
    if installed sudo; then
      export SUDO=`command -v sudo`
      echo 'Attempting to get sudo access.  Your password may be required.'
      echo 'Some features may not be available if you are not a sudoer.'
      if $SUDO -v; then
        export SUDOER=1
        return 0
      else
        export SUDOER=0
        return 1
      fi
    else
      echo "sudo: not installed -- expect failures"
      return 0
    fi
  fi
}

is_admin() {
  if [ \( "$USER" = "root" \) -o \( "$SUDOER" = "1" \) ]; then
    return 0
  elif [ -z "$SUDOER" ]; then
    get_sudo
    return $?
  else
    return 1
  fi
}

# Discover an installed Mac application.
# Derived from an answer here:
# https://stackoverflow.com/questions/6682335/how-can-check-if-particular-application-software-is-installed-in-mac-os
# Removed support for direct lookup by bundleid and error output on failed match.
which_app() {
  local appname=$1 bundleid='' full_path=''
  # Translate to a bundle ID first.
  bundleid=`osascript -e "id of application \"$appname\"" 2>/dev/null`
  if [ ! -z "$bundleid" ]; then
    full_path=`osascript -e "tell application \"Finder\" to POSIX path of (get application file id \"$bundleid\" as alias)" 2>/dev/null` || ''
  fi
  if [ -z "$fullpath" ]; then
    return 1
  fi
  return 0
}
