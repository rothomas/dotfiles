#!/usr/bin/env bash

eval_get() {
  case "$1" in
  hostname)
    hostname -s
    ;;
  platform)
    uname -s
    ;;
  router)
    if command -v ip > /dev/null; then
      ip neigh | grep "^$(ip route list | grep '^default ' | cut -d' ' -f3-5)" | cut -d' ' -f5 | uniq
    else
      >&2 echo 'router requires ip util, available on macOS via Homebrew as "iproute2mac"'
      exit 1
    fi
    ;;
  tailscale)
    if [ -x "$(command -v tailscale)" ]; then
      if tailscale status > /dev/null; then
        echo "up"
      else
        echo "down"
      fi
    else
      echo "down"
    fi
    ;;
  wifi)
    if eval_is platform Darwin; then
      /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | sed -n 's/.* SSID: //p'
    elif eval_is platform Linux && test -x "$(command -v iwgetid)"; then
      iwgetid -r
    else
      echo "No wifi detected"
    fi
    ;;
  *)
    return 1
    ;;
  esac
}

# The "is" utility can be used recursively in principle, but it's more efficient to use "eval_is" internally to recurse
# the function call instead of shell invocations. See the "wifi" case for an example of such recursion.
eval_is() {
  current_status="$(eval_get $1)"
  if [ "$?" == "0" ]; then
    test "$current_status" == "$2"
  else
    return 1
  fi
}

case "$(basename $0)" in
  get)
    eval_get $@
    ;;
  is)
    eval_is $@
    ;;
  *)
    >&2 echo "Unknown command, $(basename $0)"
    exit 1
    ;;
esac

