#!/usr/bin/env bash

CONFIG_PATH="${XDG_CONFIG_HOME:-${HOME}/.config}/path"
PATH_STACK="${CONFIG_PATH}/.path_stack"
PLATFORM_PROFILE="$(uname | tr '[A-Z]' '[a-z]')_default"
PLATFORM_DEFAULT_PATH="${CONFIG_PATH}/${PLATFORM_PROFILE}"
DEFAULT_PATH="${CONFIG_PATH}/default"

declare -a default_paths=(
  # the nvm initialization needs to add the path itself
  /bin
  /sbin
  /usr/bin
  /usr/games
  /usr/sbin
  /usr/local/bin
  /usr/local/games
  /usr/local/sbin
  /snap/bin
  ${HOME}/bin
  ${HOME}/.local/bin
  ${HOME}/.pyenv/bin
  ${HOME}/go/bin
  ${HOME}/.cargo/bin
  ${HOME}/.rvm/bin # rvm prefers to go last
)

if [ "${1}" = 'test' ]; then
  current_path=(a b c d e f)
else
  IFS=':' read -r -a current_path <<< "${PATH}"
fi

function join_by { local IFS="$1"; shift; echo "$*"; }

build() {
  echo $(join_by ':' ${current_path[@]})
}

remove() {
  local path="$1"
  declare -a new_path=()
  for existing_path in ${current_path[@]}; do
    if [[ "${existing_path}" != "${path}" ]]; then
      new_path+=( $existing_path )
    fi
  done
  current_path=(${new_path[@]})
  echo "export PATH=\"$(build)\""
}

append() {
  local path="$1"
  declare -a new_path=()
  for existing_path in ${current_path[@]}; do
    if [[ "${existing_path}" != "${path}" ]]; then
      new_path+=( $existing_path )
    fi
  done
  new_path+=( $path )
  current_path=(${new_path[@]})
  echo "export PATH=\"$(build)\""
}

prepend() {
  local path="$1"
  declare -a new_path=( $path )
  for existing_path in ${current_path[@]}; do
    if [[ "${existing_path}" != "${path}" ]]; then
      new_path+=( $existing_path )
    fi
  done
  current_path=(${new_path[@]})
  echo "export PATH=\"$(build)\""
}

init() {
  if [ -f "${PLATFORM_DEFAULT_PATH}" ]; then
    restore "${PLATFORM_PROFILE}"
  elif [ -f "${DEFAULT_PATH}" ]; then
    restore "default"
  else  
    current_path=()
    current_path=(${default_paths[@]})
    echo "export PATH=\"$(build)\""
  fi
}

test() {
  build
  echo 'remove c'
  remove c
  build
  echo 'prepend d'
  prepend d
  build
  echo 'append b'
  append b
  build
  echo 'prepend g'
  prepend g
  build
  echo 'append h'
  append h
  build
  if [[ "$(build)" == "g:d:a:e:f:b:h" ]]; then
    >&2 echo PASS
  else
    >&2 echo FAIL: $(build) != g:d:a:e:f:b:h
  fi
  echo "export PATH=\"$(build)\""
}

save() {
  local profile=${1:-default}
  local save_file="${CONFIG_PATH}/${profile}"
  mkdir -p "${CONFIG_PATH}"
  cat > "${save_file}" <<< $(build | tr ':' '\n')
}

restore() {
  local profile=${1:-default}
  local save_file="${CONFIG_PATH}/${profile}"
  mkdir -p "${CONFIG_PATH}"
  if [[ -f "${save_file}" ]]; then
    echo "export PATH=\"$(cat "${save_file}" | tr '\n' ':' | sed 's/:*$//')\""
    return 0
  fi
  >&2 echo "Profile ${profile} does not exist."
  return 1
}

push() {
  mkdir -p "${CONFIG_PATH}"
  echo $PATH >> "${PATH_STACK}"
}

pop() {
  if [ -f "${PATH_STACK}" ]; then
    local path = "$(tail -1 "${PATH_STACK}")"
    if [ ! -z "${path}" ]; then
      echo "export PATH=\"${path}\""
      sed -i '$ d' "${PATH_STACK}"
      return 0
    fi
  fi
  >&2 echo "Path stack is empty."
  return 1
}

declare -a valid_commands=(
  init
  append
  prepend
  remove
  test
  save
  restore
  push
  pop
)

if [[ ! -z "$1" && "${valid_commands[*]}" =~ "$1" ]]; then
  "$@"
else
  >&2 cat <<USAGE_DOC
path - a simple path management utility
Usage:
  eval \$(path <command> [args])
Commands:
- init: set up a default path
- append <path>: adds path to the end of PATH (*)
- prepend <path>: adds path to the beginning of PATH (*)
- remove <path>: removes path from PATH
- save [profile]: saves the current path to the specified profile (+)
- restore [profile]: restores the current path from the specified profile (+)
- push: pushes the current PATH onto the path stack
- pop: resets PATH from the path stack
(*) If the specified path already exists in PATH, append and prepend will
    remove it from the current order and move it to the end or beginning
    of PATH respectively.
(+) The default value for the optional profile argument is "default"
USAGE_DOC
fi

